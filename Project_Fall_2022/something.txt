  /*reg[3:0] i=0;
  reg[5:0] j=0;
  reg [15:0]out_value;
  reg[15:0] mid_value1;
  reg[15:0] mid_value2;
  weights_sram_read_address =0;
  input_sram_read_address =0;
  reg[7:0] kernel[0:8];
  wire [7:0] N;
  N= input_sram_read_data[7:0];
  input_sram_read_address =1;
);

 always@(posedge clock)
   begin
     if(reset_b)
     begin
       j=0;
     end
     else
     begin
       if(k<9)
       begin
         kernel[k] = [7:0]weights_sram_read_data;
         kernel[k+1] =[15:8]weights_sram_read_data;
         weights_skram_read_address= weights_sram_sram_address + 1;'
         k=k+2;
       end
       if(j<=N-2)
       begin
         if(i<9)
         begin
           //input_matrix[i]= [7:0]input_sram_read_data;
           //input_matrix[i+1]= [15:8]input_sram_read_data;
           //input_sram_read_address = input_sram_read_address+1;
           mid_value1= input_matrix[i]*kernel[i];
           mid_value1= input_matrix[i+1]*kernel[i+1];
           out_value= out_value + mid_value1+ mid_value2;
           if(i == 8)
           begin
             if(out_value>0)
             begin
               scratchpad_sram_write_enable = 1;
               scratchpad_sram_write_data = out_value;
               scratchpad_sram_write_address= scratchpad_sram_write_address+1; 
             end
             else
             begin
               scratchpad_sram_write_enable = 1;
               scratchpad_sram_write_data = 0;
               scratchpad_sram_write_address= scratchpad_sram_write_address+1;         
             end
           end
           i=i+2;
         end
         else
         begin
           i=0;
         end
         j=j+1;
       end
     end 
   end
*/